import telebot
import logging
import sqlite3
from datetime import datetime, timedelta
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
import aiohttp
import qrcode
from transliterate import translit
import wg_easy_api_wrapper
from wg_easy_api_wrapper import Server
import threading
from telebot import types
import os

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

#credentials
ADMIN_ID = os.getenv('ADMIN_ID')
server_url = os.getenv('server_url')
password = os.getenv('password')
TOKEN = os.getenv('TOKEN')
bot = telebot.TeleBot(TOKEN)
user_device_map = {}
user_devices = {}
user_periods = {}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect("data/vpn_subscriptions.db")
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS clients (
                        id INTEGER PRIMARY KEY,
                        name TEXT,
                        tg_id INTEGER UNIQUE,
                        created_at TEXT)''')

    cursor.execute('''CREATE TABLE IF NOT EXISTS subscriptions (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        name TEXT,
                        client_id INTEGER,
                        device_name TEXT,
                        subscription_period INTEGER,
                        start_date TEXT,
                        end_date TEXT,
                        payment_proof TEXT,
                        confirmed INTEGER DEFAULT 0,
                        file_name TEXT,
                        FOREIGN KEY (client_id) REFERENCES clients(id))''')
    conn.commit()
    conn.close()


init_db()

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def main_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–¢–∞—Ä–∏—Ñ—ã"))
    markup.add(KeyboardButton("–û –Ω–∞—Å"))
    markup.add(KeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"))
    return markup


# –°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞
def metod_choice():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–§–∞–π–ª"))
    markup.add(KeyboardButton("QR-–∫–æ–¥"))
    markup.add(KeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"))
    return markup


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤
def tariffs_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("1 –º–µ—Å—è—Ü - 150‚ÇΩ"))
    markup.add(KeyboardButton("3 –º–µ—Å—è—Ü–∞ - 400‚ÇΩ"))
    markup.add(KeyboardButton("6 –º–µ—Å—è—Ü–µ–≤ - 750‚ÇΩ"))
    return markup


def metod_choice_country():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("Phone"))
    markup.add(KeyboardButton("Computer"))
    markup.add(KeyboardButton("TV"))
    return markup


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
def after_payment_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"))
    markup.add(KeyboardButton("–ü–æ–¥–∫–ª—é—á–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"))
    markup.add(KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"))
    markup.add(KeyboardButton("–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞"))
    return markup

def subsribe_renew():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"))
    markup.add(KeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"))
    return markup

def info_button():
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text='üìù –û—Ñ–µ—Ä—Ç–∞', url='https://telegra.ph/Oferta-na-obsluzhivanie-SHifrovannogo-kanala-04-23')
    button2 = types.InlineKeyboardButton(text='üìñ –ü—Ä–∞–≤–∏–ª–∞', url='https://telegra.ph/Pravila-polzovaniya-Telegram-botom-VPN-04-24')
    button3 = types.InlineKeyboardButton(text='üåê –ù–∞—à –∫–∞–Ω–∞–ª', url='https://t.me/virtual_privat_network')
    markup.row(button1, button2)
    markup.add (button3)
    return markup

@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, """üåç –°–≤–æ–±–æ–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç ‚Äì –≤—Å–µ–≥–æ –∑–∞ 150 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü! üöÄ

–¢–≤–æ–∏ –ª—é–±–∏–º—ã–µ —Å–∞–π—Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã? üò°
Instagram, YouTube, ChatGPT, X (Twitter) –∏ –¥—Ä—É–≥–∏–µ —Ä–µ—Å—É—Ä—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã?

üîë –†–µ—à–µ–Ω–∏–µ –µ—Å—Ç—å! –ù–∞—à VPN –æ—Ç–∫—Ä–æ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É!""", reply_markup=main_keyboard())
    
    bot.send_message(message.chat.id, "üìã –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è–º–∏", reply_markup=info_button())


@bot.message_handler(func=lambda message: message.text == "–¢–∞—Ä–∏—Ñ—ã")
def show_tariffs(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=tariffs_keyboard())


@bot.message_handler(content_types=['photo'])
def handle_payment_proof(message, period):
    user_id = message.chat.id
    name = message.from_user.first_name
    
    if period is not None:
        user_periods[user_id] = period

    if message.photo is None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ñ–æ—Ç–æ
        msg = bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –°–ö–†–ò–ù–®–û–¢ –æ–ø–ª–∞—Ç—ã!")
        bot.register_next_step_handler(msg, lambda m: handle_payment_proof(m, period))  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        return

    file_id = message.photo[-1].file_id

    msg = bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–µ–Ω VPN', reply_markup=metod_choice_country())
    bot.register_next_step_handler(msg, lambda m: save_subscription(m, user_id, name, file_id, user_periods.get(user_id)))


def save_subscription(message, user_id, name, file_id, period):
    device_name = message.text
    user_device_map[user_id] = device_name

    conn = sqlite3.connect("data/vpn_subscriptions.db")
    cursor = conn.cursor()

    cursor.execute("SELECT id FROM clients WHERE tg_id = ?", (user_id,))
    client = cursor.fetchone()

    if not client:
        cursor.execute("INSERT INTO clients (name, tg_id, created_at) VALUES (?, ?, ?)",
                       (name, user_id, datetime.now().strftime("%d.%m.%Y")))
        conn.commit()
        client_id = cursor.lastrowid
    else:
        client_id = client[0]
###
    cursor.execute(
        "INSERT INTO subscriptions (client_id, device_name, subscription_period, payment_proof) VALUES (?, ?, ?, ?)",
        (client_id, device_name, period, file_id))

    cursor.execute("""
        UPDATE subscriptions
        SET name = (SELECT clients.name FROM clients WHERE clients.id = subscriptions.client_id)
        WHERE client_id IN (SELECT id FROM clients)
    """)
    conn.commit()
    conn.close()

    bot.send_message(user_id, "üì© –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    markup = InlineKeyboardMarkup()
    confirm_btn = InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{user_id}_{device_name}_{period}")
    reject_btn = InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}_{device_name}")
    markup.add(confirm_btn, reject_btn)
    tg = message.from_user.username

    bot.send_photo(ADMIN_ID, file_id, caption=f"üí∞ –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –æ—Ç {name}: @{tg} (ID: {user_id}) –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_name}",
                   reply_markup=markup)



@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_"))
def confirm_payment(call):
    try:
        _, tg_id, device_name, period = call.data.split("_", 3)
        tg_id = int(tg_id)
        period_int = int(period)

        now = datetime.now()
        start_date_var = now.strftime("%d.%m.%Y")
        end_date_var = (now + timedelta(days=int(period_int))).strftime("%d.%m.%Y")

        conn = sqlite3.connect("data/vpn_subscriptions.db")
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º client_id –ø–æ tg_id
        cursor.execute("SELECT id FROM clients WHERE tg_id = ?", (tg_id,))
        client = cursor.fetchone()
        if not client:
            bot.send_message(ADMIN_ID, f"–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç —Å TG_ID {tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return

        client_id = client[0]
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        cursor.execute('''
            UPDATE subscriptions 
            SET start_date = ?, end_date = ?, confirmed = 1
            WHERE client_id = ? AND device_name = ?''',(start_date_var, end_date_var, client_id, device_name))
        conn.commit()

        cursor.execute("SELECT * FROM subscriptions WHERE client_id = ? AND device_name = ?", (client_id, device_name))
        updated_subscription = cursor.fetchone()
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å: {updated_subscription}")
        conn.close()

        bot.send_message(tg_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {period} –¥–Ω–µ–π")
        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id, caption=f"‚úÖ –û–ø–ª–∞—Ç–∞ –æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")

        if device_name == 'Phone':
            bot.send_message(tg_id,
                             f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {device_name}: https://telegra.ph/Instrukciya-dlya-podklyucheniya-Telefona-04-24 \n\n–° –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏‚öôÔ∏è",
                             reply_markup=metod_choice())
        elif device_name == 'Computer':
            bot.send_message(tg_id,
                             f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {device_name}: https://telegra.ph/Instrukciya-dlya-podklyucheniya-PK-04-24 \n\n–° –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏‚öôÔ∏è",
                             reply_markup=metod_choice())
        elif device_name == 'TV':
            bot.send_message(tg_id,
                             f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {device_name}: https://telegra.ph/Instrukciya-dlya-podklyucheniya-TV-04-24 \n\n–° –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏‚öôÔ∏è",
                             reply_markup=metod_choice())
        else:
            bot.send_message(tg_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É: @doemull")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã: {e}")
        bot.send_message(ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("reject_"))
def reject_payment(call):
    _, tg_id, device_name = call.data.split("_")

    bot.send_message(tg_id, "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ @doemull")
    bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                             caption="‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    
    period = user_periods.get(tg_id)

    msg = bot.send_message(tg_id, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –°–ö–†–ò–ù–®–û–¢ –æ–ø–ª–∞—Ç—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
    bot.register_next_step_handler(msg, lambda m:handle_payment_proof(m, period))

def transliterate_name(client_name):
    """–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ—Ç —Ä—É—Å—Å–∫–∏–µ –∏–º–µ–Ω–∞ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ"""
    return translit(client_name, 'ru', reversed=True) if client_name else "client"


@bot.message_handler(func=lambda message: message.text in ["1 –º–µ—Å—è—Ü - 150‚ÇΩ", "3 –º–µ—Å—è—Ü–∞ - 400‚ÇΩ", "6 –º–µ—Å—è—Ü–µ–≤ - 750‚ÇΩ"])
def process_tariff_choice(message):
    periods = {"1 –º–µ—Å—è—Ü - 150‚ÇΩ": 30, "3 –º–µ—Å—è—Ü–∞ - 400‚ÇΩ": 90, "6 –º–µ—Å—è—Ü–µ–≤ - 750‚ÇΩ": 180}
    amount = {"1 –º–µ—Å—è—Ü - 150‚ÇΩ": 150, "3 –º–µ—Å—è—Ü–∞ - 400‚ÇΩ": 400, "6 –º–µ—Å—è—Ü–µ–≤ - 750‚ÇΩ": 750}
    period = periods[message.text]
    price = amount[message.text]

    pay_links = {
        "1 –º–µ—Å—è—Ü - 150‚ÇΩ": "–ù–æ–º–µ—Ä: +7913-585-25-60 (–î–∞–Ω–∏–∏–ª –°–µ—Ä–≥–µ–µ–≤–∏—á –§.)\n–ë–∞–Ω–∫: –†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω ‚ÄºÔ∏è",
        "3 –º–µ—Å—è—Ü–∞ - 400‚ÇΩ": "–ù–æ–º–µ—Ä: +7913-585-25-60 (–î–∞–Ω–∏–∏–ª –°–µ—Ä–≥–µ–µ–≤–∏—á –§.)\n–ë–∞–Ω–∫: –†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω ‚ÄºÔ∏è",
        "6 –º–µ—Å—è—Ü–µ–≤ - 750‚ÇΩ": "–ù–æ–º–µ—Ä: +7913-585-25-60 (–î–∞–Ω–∏–∏–ª –°–µ—Ä–≥–µ–µ–≤–∏—á –§.)\n–ë–∞–Ω–∫: –†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω ‚ÄºÔ∏è"
    }

    bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.text}\n\n–û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥:\n{pay_links[message.text]}")

    bot.send_message(message.chat.id, f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã:")
    bot.register_next_step_handler(message, lambda m: handle_payment_proof(m, period))


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
async def get_client_config(client_name):
    english_name = transliterate_name(client_name)
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    await asyncio.sleep(2)  # –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
    async with aiohttp.ClientSession() as session:
        server = Server(server_url, password, session)
        await server.login()
        clients = await server.get_clients()
        for client in clients:
            if client.name == english_name:
                return await client.get_configuration()
    return None  # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
async def create_client(client_name):
    english_name = transliterate_name(client_name)
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ WireGuard, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    async with aiohttp.ClientSession() as session:
        server = Server(server_url, password, session)
        await server.login()
        await server.create_client(english_name)


async def process_and_send_config(user_id, client_names):
    english_name = transliterate_name(client_names)
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ), –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ"""
    config = await get_client_config(english_name)

    if config is None:  # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ
        await create_client(english_name)
        await asyncio.sleep(5)  # –î–∞—ë–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ñ–∏–≥–∞
        config = await get_client_config(english_name)  # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–Ω–æ–≤–∞

    if config:
        filename = f"{english_name}.conf"
        with open(filename, "w") as file:
            file.write(config)

        with open(filename, "rb") as file:
            bot.send_document(user_id, file, caption=f"‚úÖ –í–æ—Ç –≤–∞—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª {filename}",
                              reply_markup=after_payment_keyboard())

    else:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.", reply_markup=after_payment_keyboard())


async def process_and_send_config_QR(user_id, client_names):
    english_name = transliterate_name(client_names)
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ), –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ"""
    config = await get_client_config(english_name)

    if config is None:  # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ
        await create_client(english_name)
        await asyncio.sleep(5)  # –î–∞—ë–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ñ–∏–≥–∞
        config = await get_client_config(english_name)  # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–Ω–æ–≤–∞

    if config:
        qr_filename = f"{english_name}.png"
        qr = qrcode.make(config)
        qr.save(qr_filename)
        with open(qr_filename, "rb") as qr_file:
            bot.send_photo(user_id, qr_file, caption="üì° –í–æ—Ç –≤–∞—à QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!",
                           reply_markup=after_payment_keyboard())
    else:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.", reply_markup=after_payment_keyboard())

async def check_subscriptions(bot: telebot):
    while True:
        try:
            conn = sqlite3.connect("data/vpn_subscriptions.db")
            cursor = conn.cursor()

            today = datetime.now().strftime("%d.%m.%Y")
            today_date = datetime.now().date()

            cursor.execute("""
                            SELECT client_id, device_name, end_date 
                            FROM subscriptions 
                            WHERE end_date = ? AND confirmed = 1
                           """, (today,))
            subscriptions = cursor.fetchall()

            user_subscriptions = {}
            for client_id, device_name, end_date in subscriptions:
                if client_id not in user_subscriptions:
                    user_subscriptions[client_id] = []
                user_subscriptions[client_id].append(f"üîπ{device_name} –¥–æ {end_date}‚ÄºÔ∏è")


            for client_id, devices in user_subscriptions.items():
                cursor.execute('''
                SELECT  tg_id, name 
                FROM clients 
                WHERE id = ?''', (client_id,))
                client = cursor.fetchone()
                if client:
                    tg_id, name = client
                    device_list = "\n".join(devices)
                    message = (f"{name}, –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è ‚è∞ \n\n{device_list}\n\n–ü—Ä–æ–¥–ª–∏—Ç–µ –µ–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è!")

                    keyboard = InlineKeyboardMarkup()
                    for device_name in devices:
                        keyboard.add(InlineKeyboardButton(
                        text = f"–ü—Ä–æ–¥–ª–∏—Ç—å –¥–ª—è: {device_name}",
                        callback_data = f"renew_{client_id}_{device_name}"))    
                    bot.send_message(tg_id, message, reply_markup=keyboard)
            
            #–ø—Ä–æ—Å—Ä–æ—á–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –¥–≤–∞ –¥–Ω—è
            cursor.execute("""
                           SELECT client_id, device_name, end_date
                           FROM subscriptions 
                           WHERE confirmed = 1
                           """)
            all_subscriptions = cursor.fetchall()

            expired_subs = {}

            for client_id, device_name, end_date in all_subscriptions: 
                try:
                    end_date_obj = datetime.strptime(end_date, "%d.%m.%Y").date()
                except ValueError:
                    print (f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: {end_date}")
                    continue

                if today_date >=end_date_obj + timedelta(days=2):
                    if client_id not in expired_subs:
                        expired_subs[client_id] = []
                    expired_subs[client_id].append(device_name)

            for client_id, devices in expired_subs.items():
                cursor.execute("""
                            SELECT tg_id, name
                                FROM clients
                                WHERE id = ?
                               """, (client_id,))
                client = cursor.fetchone()

                if client:
                    tg_id, name = client
                    device_lister = "\n".join ([f"üîπ {device_name}" for device_name in devices])
                    bot.send_message(tg_id, f"{name}, —É –≤–∞—Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã –±–æ–ª–µ–µ 2-—Ö –¥–Ω–µ–π —Å–ª–µ–¥—É—é—â–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚ö†Ô∏è\n\n{device_lister}\n\n–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ üìµ")
                    user = client
                    #print (user, devices)
                    await (dis_client(user, devices))
            conn.close()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫:{e}")
        await asyncio.sleep(43200)

async def dis_client (user, devices):
    tg_id, name = user
    async with aiohttp.ClientSession() as session:
        server = Server(server_url, password, session)
        await server.login()

        clients = await server.get_clients()
        
        for device in devices:
            file_name = f"{name}_{tg_id}_{device}"
            #print (file_name)
            target_client = None
            

            for client in clients:
                if client.name == file_name:
                    target_client = client
                    break
        

            if target_client:       
                #print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç: {target_client.name}")
                #print(f"UID: {target_client.uid}")
                #–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
                await target_client.disable()
                bot.send_message(tg_id, f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{target_client.name}' –æ—Ç–∫–ª—é—á–µ–Ω–∞.\n\n–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ üí≥")
                bot.send_message(ADMIN_ID, f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{target_client.name}' –æ—Ç–∫–ª—é—á–µ–Ω–∞. ")
            else:
                print("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")




def del_sub(message):
    conn = sqlite3.connect("data/vpn_subscriptions.db")
    cursor = conn.cursor()

    cursor.execute("SELECT id, device_name, start_date, end_date FROM subscriptions WHERE client_id = (SELECT id FROM clients WHERE tg_id = ?) ", (message.chat.id,))
    del_device = cursor.fetchall()

    if not del_device:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
        return

    keyboard = InlineKeyboardMarkup()
    for sub_id, device_name, start_date, end_date in del_device:
        button_text = f"üîπ{device_name} —Å {start_date} –ø–æ {end_date}"
        keyboard.add(InlineKeyboardButton(text=button_text, callback_data=f"delete_{sub_id}"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=keyboard)

    conn.close()

async def delete_from_wg(file_name, sub_id):
    async with aiohttp.ClientSession() as session:
        server = Server(server_url, password, session)
        await server.login()

        clients = await server.get_clients()
        target_client = None

        for client in clients:
            if client.name == file_name:
                target_client = client
                break

        if target_client:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç: {target_client.name}")
            print(f"UID: {target_client.uid}")
            # –ü—Ä–∏–º–µ—Ä: —É–¥–∞–ª–∏—Ç—å
            await server.remove_client(target_client.uid)
            print(f"–ö–ª–∏–µ–Ω—Ç '{client.name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")

        else:
            print("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        conn = sqlite3.connect("data/vpn_subscriptions.db")
        cursor = conn.cursor()
        cursor.execute("DELETE FROM subscriptions WHERE id = ?", (sub_id,))
        conn.commit()
        conn.close()


def handle_delete_callback(call):
    if call.data.startswith("delete_"):
        sub_id = call.data.split("_")[1]
        conn = sqlite3.connect("data/vpn_subscriptions.db")
        cursor = conn.cursor()

        cursor.execute("SELECT file_name FROM subscriptions WHERE id = ?", (sub_id,))
        file_name = cursor.fetchone()[0]
        print (file_name)
        
        bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=after_payment_keyboard())
        asyncio.run(delete_from_wg(file_name,sub_id))


def keyboard_renew():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("1 –º–µ—Å—è—Ü - 150‚ÇΩ", callback_data="sub_1m"))
    keyboard.add(InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ - 400‚ÇΩ", callback_data="sub_3m"))
    keyboard.add(InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤ - 750‚ÇΩ", callback_data="sub_6m"))
    return keyboard

def handle_renew_subscriprions(call):
    if call.data.startswith("renew_"):
        tg_id = call.message.chat.id

        conn = sqlite3.connect("data/vpn_subscriptions.db")
        cursor = conn.cursor()

        cursor.execute("SELECT id FROM clients WHERE tg_id = ?", (tg_id,))
        user_str = cursor.fetchone()
        today_end = datetime.now()

        if user_str:
            client_id = user_str[0]
            cursor.execute("SELECT * FROM subscriptions WHERE client_id = ?", (client_id,))
            user_exists = cursor.fetchone()
            cursor.execute("SELECT device_name FROM subscriptions WHERE client_id = ? AND end_date <= ?", (client_id, today_end.strftime("%d.%m.%Y")))
            user_device = cursor.fetchone()[0]

            user_devices[tg_id] = user_device
        else:
            bot.send_message(tg_id, "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            conn.close()
            return
        conn.close()

        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ", reply_markup=keyboard_renew())


@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
def callback_handler(call):
    handle_delete_callback(call)


@bot.callback_query_handler(func=lambda call: call.data.startswith("renew_"))
def callback_renew(call):
    handle_renew_subscriprions(call)

@bot.callback_query_handler(func=lambda call: call.data.startswith("sub_"))
def handler_renew_subscriptions(call):
    tg_id = call.message.chat.id
    user_device = user_devices.get(tg_id)

    if not user_device:
        bot.send_message(tg_id, "–û—à–∏–±–∫–∞, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ—Ç")
        return

    subscription_data = {
        "sub_1m": {
            "link":"–ù–æ–º–µ—Ä: +7913-585-25-60 (–î–∞–Ω–∏–∏–ª –°–µ—Ä–≥–µ–µ–≤–∏—á –§.\n–ë–∞–Ω–∫: –†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω ‚ÄºÔ∏è)",
            "days": 30,
            "label": "1 –º–µ—Å—è—Ü - 150‚ÇΩ"
        },
        "sub_3m": {
            "link": "–ù–æ–º–µ—Ä: +7913-585-25-60 (–î–∞–Ω–∏–∏–ª –°–µ—Ä–≥–µ–µ–≤–∏—á –§.\n–ë–∞–Ω–∫: –†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω ‚ÄºÔ∏è",
            "days": 90,
            "label": "3 –º–µ—Å—è—Ü–∞ - 400‚ÇΩ"
        },
        "sub_6m": {
            "link": "–ù–æ–º–µ—Ä: +7913-585-25-60 (–î–∞–Ω–∏–∏–ª –°–µ—Ä–≥–µ–µ–≤–∏—á –§.\n–ë–∞–Ω–∫: –†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω ‚ÄºÔ∏è",
            "days": 180,
            "label": "6 –º–µ—Å—è—Ü–µ–≤ - 750‚ÇΩ"
        }
    }

    selected = subscription_data.get(call.data)

    if selected:
        bot.send_message(tg_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞: {selected['label']}\n"
                                  f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {selected['days']} –¥–Ω–µ–π\n\n"
                                  f"–û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥:\n{selected['link']}")
    else:
        bot.send_message(tg_id, "–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.")


    conn = sqlite3.connect('data/vpn_subscriptions.db')
    cursor = conn.cursor()

    cursor.execute('SELECT id FROM clients where tg_id = ?', (tg_id,))
    result = cursor.fetchone()

    if not result:
        bot.send_message(tg_id, "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        conn.close()
        return
    client_id = result[0]

    start_date = datetime.now()
    end_date = start_date + timedelta(days=selected["days"])

    cursor.execute('''UPDATE subscriptions
    SET subscription_period = ?, start_date = ?, end_date = ?
    WHERE client_id = ? AND device_name = ?''', (selected["days"], start_date.strftime("%d.%m.%Y"), end_date.strftime("%d.%m.%Y"), client_id, user_device))

    conn.commit()
    conn.close()
    ask_for_screenshot(call.message, user_device)

def ask_for_screenshot(message,user_device):
    msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: "+user_device)
    bot.register_next_step_handler(msg, lambda m: handle_payment_screenshot(m, user_device))


def handle_payment_screenshot(message, user_device):
    if message.photo:
        file_id = message.photo[-1].file_id
        name = message.from_user.username
        caption = f"–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –æ—Ç @{name}\n–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {user_device}"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirmed_{message.chat.id}_{user_device}"))
        markup.add(InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{message.chat.id}_{user_device}"))

        bot.send_photo(ADMIN_ID, file_id, caption=caption, reply_markup=markup)
        bot.send_message(message.chat.id, "üì© –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –°–ö–†–ò–ù–®–û–¢ –æ–ø–ª–∞—Ç—ã")

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirmed_") or call.data.startswith("decline_"))
def process_payment_decision(call):
    data_parts = call.data.split("_")
    action = data_parts[0]
    user_id = int(data_parts[1])
    user_device = "_".join(data_parts[2:])

    if action == "confirmed":
        bot.send_message(user_id, f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {user_device} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ ‚úÖ")
        asyncio.run(process_enable(data_parts))

    elif action == "decline":
        bot.send_message(user_id, f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {user_device} –Ω–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚ùå")
    bot.answer_callback_query(call.id)

def process_enable(data_parts):
    tg_id = data_parts[1]
    device = data_parts[2]

    conn = sqlite3.connect("data/vpn_subscriptions.db")
    cursor = conn.cursor()
    
    cursor.execute("SELECT id FROM clients WHERE tg_id = ?", (tg_id,))
    client_id = cursor.fetchone()
    cursor.execute("SELECT file_name FROM subscriptions WHERE client_id=? AND device_name=?", (client_id, device))
    file_name = cursor.fetchone()
    print (file_name)



@bot.message_handler(func=lambda message: message.text == "–§–∞–π–ª")
def config_file(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '–§–∞–π–ª'"""
    teleg_id = str(message.chat.id)
    device_name = user_device_map.get(message.chat.id, "UnknownDevice")
    client_name = str(message.from_user.first_name + "_" + teleg_id + "_" + device_name) # –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    
    
    conn = sqlite3.connect("data/vpn_subscriptions.db") #–∑–∞–ø–∏—Å—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É 
    cursor = conn.cursor()

    cursor.execute("SELECT id from clients WHERE tg_id = ?", (message.chat.id,))
    line = cursor.fetchone()[0] #—Å–æ–¥–µ—Ä–∂–∏—Ç id —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ 
    print ("client id:", line)

    cursor.execute("SELECT file_name FROM subscriptions WHERE client_id=? AND file_name LIKE ?", (line, f"{client_name}%"))
    
    existing_names = [row[0] for row in cursor.fetchall()]
    print ("—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–º–µ–Ω–∞:", existing_names)

    if client_name not in existing_names:
        client_names = client_name
    else:
        i = 1
        while f"{client_name}{i}" in existing_names:
            i += 1
        client_names = f"{client_name}{i}"
    print ("—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–º—è:", client_names)

    cursor.execute("""UPDATE subscriptions SET file_name =? 
                    WHERE id = (
                    SELECT id FROM subscriptions
                    WHERE client_id = ? AND device_name = ? AND file_name IS NULL
                    ORDER BY id ASC LIMIT 1)
                    """, (client_names, line, device_name))
    conn.commit()
    conn.close()

    bot.send_message(message.chat.id, "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    asyncio.run(process_and_send_config(message.chat.id, client_names))


@bot.message_handler(func=lambda message: message.text == "QR-–∫–æ–¥")
def config_QR(message):
    teleg_id = str(message.chat.id)
    device_name = user_device_map.get(message.chat.id, "UnknownDevice")

    client_name = str(message.from_user.first_name + "_" + teleg_id + "_" + device_name)
    

    conn = sqlite3.connect("data/vpn_subscriptions.db") #–∑–∞–ø–∏—Å—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É 
    cursor = conn.cursor()

    cursor.execute("SELECT id from clients WHERE tg_id = ?", (message.chat.id,))
    line = cursor.fetchone()[0] #—Å–æ–¥–µ—Ä–∂–∏—Ç id —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ 
    print ("client id:", line)

    cursor.execute("SELECT file_name FROM subscriptions WHERE client_id=? AND file_name LIKE ?", (line, f"{client_name}%"))
    
    existing_names = [row[0] for row in cursor.fetchall()]
    print ("—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–º–µ–Ω–∞:", existing_names)

    if client_name not in existing_names:
        client_names = client_name
    else:
        i = 1
        while f"{client_name}{i}" in existing_names:
            i += 1
        client_names = f"{client_name}{i}"
    print ("—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–º—è:", client_names)

    cursor.execute("""UPDATE subscriptions SET file_name =? 
                    WHERE id = (
                    SELECT id FROM subscriptions
                    WHERE client_id = ? AND device_name = ? AND file_name IS NULL
                    ORDER BY id ASC LIMIT 1)
                    """, (client_names, line, device_name))
    conn.commit()
    conn.close()

    bot.send_message(message.chat.id, "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")    
    asyncio.run(process_and_send_config_QR(message.chat.id, client_names))


@bot.message_handler(func=lambda message: message.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
def show_profile(message):
    conn = sqlite3.connect("data/vpn_subscriptions.db")
    cursor = conn.cursor()

    cursor.execute("SELECT id, name FROM clients WHERE tg_id = ?", (message.chat.id,))
    client = cursor.fetchone()

    if client:
        client_id, name = client
        cursor.execute("SELECT device_name, start_date, end_date, confirmed FROM subscriptions WHERE client_id = ?",
                       (client_id,))
        subscriptions = cursor.fetchall()
        conn.close()

        profile_text = f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n–ò–º—è: {name}\n\nüì± –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n"

        for sub in subscriptions:
            device, start_date_var, end_date_var, confirmed = sub
            status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" if confirmed else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            profile_text += f"üîπ {device}: {status}\n‚è≥ {start_date_var} - {end_date_var}\n\n"

        bot.send_message(message.chat.id, profile_text)
    else:
        bot.send_message(message.chat.id, "–í—ã –µ—â–µ –Ω–µ –æ—Ñ–æ—Ä–º–ª—è–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É.")

@bot.message_handler(func=lambda message: message.text == "–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
def support(message):
    support_profile = 'https://t.me/doemull'
    bot.send_message(message.chat.id,
                     f"–ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {support_profile}")

@bot.message_handler(func=lambda message: message.text == "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
def new_device(message):
    show_tariffs(message)

@bot.message_handler(func=lambda message: message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
def delete_sub(message):
    del_sub(message)

@bot.message_handler(func=lambda message: message.text == "–û –Ω–∞—Å")
def information(message):
    bot.send_message(message.chat.id, f''' üåê –ù–∞—à–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ - —ç—Ç–æ: 

‚úîÔ∏è –û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ ‚Äì –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –∑–∞–ø—Ä–µ—Ç–æ–≤
‚úîÔ∏è –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å ‚Äì –Ω–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç, —á—Ç–æ —Ç—ã —Å–º–æ—Ç—Ä–∏—à—å
‚úîÔ∏è –ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö ‚Äì –Ω–∞–¥–µ–∂–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ 
‚úîÔ∏è –û—Ç–ª–∏—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å ‚Äì –Ω–∏–∫–∞–∫–∏—Ö –ª–∞–≥–æ–≤ –∏ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏
‚úîÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
‚úîÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã

–õ–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:
üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã 
üá∏üá∞ –°–ª–æ–≤–∞–∫–∏—è 

üîπ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ iOS, Android, Windows, macOS''')

def run_bot():
    bot.infinity_polling()
async def main():
    loop = asyncio.get_running_loop()
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()

    await check_subscriptions(bot)

if __name__ == "__main__":
    asyncio.run(main())
